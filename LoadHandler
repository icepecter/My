using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class LoadHandler : MonoBehaviour
{
    [SerializeField, Range(0.01f, 0.1f)]
    private float _percentSpeed = 0.02f;
    
    public string PercentString
    { 
        get
        { 
            return string.Format("{0:F1}%", _percent * 100);
        }
    }


    public float PercentFloat
    { 
        get
        { 
            return _percent;
        }
    }

    private float _percent;

    public bool IsDone  { get; private set; }

    private void Awake()
    {
        DontDestroyOnLoad(this.gameObject);
    }

    public void Load(params Action[] doList)
    {
        StartCoroutine(LoadCorutine(doList, null));
    }

    public void Load(string nextName, params Action[] doList)
    {
        StartCoroutine(LoadCorutine(doList, nextName));
    }

    private IEnumerator LoadCorutine(Action[] doList, string nextName)
    {
        _percent = 0.0f;
        IsDone   = false;

        float stepPercent;
        int   len = (nextName == null) ? doList.Length : doList.Length + 1;

        for (int i = 0; i < doList.Length; i++)
        {
            stepPercent = 1f / len * (i + 1);

            yield return LoadActionCotuine(doList[i], stepPercent);
        }

        if(nextName != null)
        {
            AsyncOperation operation = SceneManager.LoadSceneAsync(nextName);
            operation.allowSceneActivation = false;

            while (operation.progress < 0.9f)
            {
                PercentAdd(1.0f);
                yield return null;
            }

            // TODO
            operation.allowSceneActivation = true;
        }

        _percent = 1.0f;
        IsDone   = true;
    }


    private IEnumerator LoadActionCotuine(Action doAction, float stepPercent)
    { 
        IAsyncResult result = doAction?.BeginInvoke(callback => {}, null);

        while(!result.IsCompleted)
        {
            PercentAdd(stepPercent);
            yield return null;
        }

        _percent = stepPercent;
    }

    private void PercentAdd(float stepPercent)
    {
        _percent = Mathf.Clamp(_percent + Time.deltaTime / 2 * _percentSpeed, _percent, stepPercent);
    }
}
